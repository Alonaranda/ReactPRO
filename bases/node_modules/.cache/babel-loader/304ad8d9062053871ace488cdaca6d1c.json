{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport { gsap } from 'gsap';\nexport const useCounter = _ref => {\n  _s();\n\n  let {\n    maxCount = 1\n  } = _ref;\n  const [counter, setCounter] = useState(0);\n  const elementToAnimate = useRef(null);\n  const tl = useRef(gsap.timeline());\n\n  const handleClick = () => {\n    setCounter(prev => Math.min(prev + 1, maxCount));\n  };\n\n  useLayoutEffect(() => {\n    if (!elementToAnimate.current) return;\n    tl.current.to(elementToAnimate.current, {\n      y: -10,\n      duration: 0.3,\n      ease: 'ease.out'\n    }).to(elementToAnimate.current, {\n      y: 0,\n      duration: 1,\n      ease: 'bounce.out'\n    }).pause();\n  }, []);\n  useEffect(() => {\n    if (counter < maxCount) return;\n    tl.current.play(0);\n  }, [counter]);\n  return {\n    counter,\n    elementToAnimate,\n    handleClick\n  };\n};\n\n_s(useCounter, \"jgD/olurPuyZNwcva2LvlrSBSGw=\");","map":{"version":3,"sources":["/Users/chrisalonso/Documents/Chris/Mis Repositorios/ReactPRO/bases/src/hooks/useCounter.ts"],"names":["useEffect","useLayoutEffect","useRef","useState","gsap","useCounter","maxCount","counter","setCounter","elementToAnimate","tl","timeline","handleClick","prev","Math","min","current","to","y","duration","ease","pause","play"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,eAApB,EAAqCC,MAArC,EAA6CC,QAA7C,QAA6D,OAA7D;AACA,SAAQC,IAAR,QAAmB,MAAnB;AAGA,OAAO,MAAMC,UAAU,GAAG,QAAoB;AAAA;;AAAA,MAAnB;AAACC,IAAAA,QAAQ,GAAG;AAAZ,GAAmB;AAE1C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAMM,gBAAgB,GAAGP,MAAM,CAAM,IAAN,CAA/B;AAEA,QAAMQ,EAAE,GAAGR,MAAM,CAACE,IAAI,CAACO,QAAL,EAAD,CAAjB;;AAEA,QAAMC,WAAW,GAAG,MAAM;AACtBJ,IAAAA,UAAU,CAAEK,IAAI,IAAIC,IAAI,CAACC,GAAL,CAASF,IAAI,GAAG,CAAhB,EAAmBP,QAAnB,CAAV,CAAV;AACH,GAFD;;AAIAL,EAAAA,eAAe,CAAC,MAAM;AAClB,QAAK,CAACQ,gBAAgB,CAACO,OAAvB,EAAgC;AAChCN,IAAAA,EAAE,CAACM,OAAH,CAAWC,EAAX,CAAcR,gBAAgB,CAACO,OAA/B,EAAwC;AAACE,MAAAA,CAAC,EAAE,CAAC,EAAL;AAASC,MAAAA,QAAQ,EAAE,GAAnB;AAAwBC,MAAAA,IAAI,EAAE;AAA9B,KAAxC,EACWH,EADX,CACcR,gBAAgB,CAACO,OAD/B,EACwC;AAACE,MAAAA,CAAC,EAAE,CAAJ;AAAOC,MAAAA,QAAQ,EAAE,CAAjB;AAAoBC,MAAAA,IAAI,EAAE;AAA1B,KADxC,EAEWC,KAFX;AAGH,GALc,EAKZ,EALY,CAAf;AAOArB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGO,OAAO,GAAGD,QAAb,EAAuB;AACvBI,IAAAA,EAAE,CAACM,OAAH,CAAWM,IAAX,CAAgB,CAAhB;AACH,GAHQ,EAGN,CAACf,OAAD,CAHM,CAAT;AAKA,SAAO;AACHA,IAAAA,OADG;AAEHE,IAAAA,gBAFG;AAGHG,IAAAA;AAHG,GAAP;AAKH,CA5BM;;GAAMP,U","sourcesContent":["import { useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport {gsap} from 'gsap'\n\n\nexport const useCounter = ({maxCount = 1}) => {\n\n    const [counter, setCounter] = useState(0);\n    const elementToAnimate = useRef<any>(null);\n\n    const tl = useRef(gsap.timeline());\n\n    const handleClick = () => {\n        setCounter( prev => Math.min(prev + 1, maxCount));\n    }\n\n    useLayoutEffect(() => {\n        if ( !elementToAnimate.current) return;\n        tl.current.to(elementToAnimate.current, {y: -10, duration: 0.3, ease: 'ease.out'})\n                  .to(elementToAnimate.current, {y: 0, duration: 1, ease: 'bounce.out'})\n                  .pause();\n    }, [])\n\n    useEffect(() => {\n        if(counter < maxCount) return;\n        tl.current.play(0);\n    }, [counter])\n\n    return {\n        counter,\n        elementToAnimate,\n        handleClick,\n    }\n}"]},"metadata":{},"sourceType":"module"}